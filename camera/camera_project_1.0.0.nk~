set cut_paste_input [stack 0]
version 11.3 v2
push $cut_paste_input
Camera2 {
 name Camera1
 selected true
 xpos -7613
 ypos 455
 addUserKnob {20 camara_projection}
 addUserKnob {52 startup T "nuke.thisNode()\[\"SET_PROJECTION\"].execute()" +STARTLINE}
 addUserKnob {22 SET_PROJECTION +INVISIBLE T "def set_projection(has_projection):\n\n    camera = nuke.thisNode()\n\n\n\n################CREATE PROJECTION####################\n\n\n\n    #Fill data values for changing knob values\n    if has_projection:\n        data = \{\"remove_projection\":True,\n                \"create_projection\": False,\n                \"tile_color\": 65535\}\n\n    else:\n        data = \{\"remove_projection\":False,\n                \"create_projection\": True,\n                \"tile_color\": 0\}\n#Manage button visibility and color\n\n    camera\[\"remove_projection\"].setVisible(data\[\"remove_projection\"])\n    camera\[\"create_projection\"].setVisible(data\[\"create_projection\"])\n    camera\[\"tile_color\"].setValue(data\[\"tile_color\"])\n\n\n#Set projection knob visibility\n\n    knobs = \[\"projection_frame\", \"zposition\"]\n    for knob in knobs:\n        camera\[knob].setVisible(has_projection)\n\n    if has_projection:\n\n# ---Adding DOT....yes, a dot----\n\n        theDot = nuke.nodes.Dot()\n        theDot.setInput(0, camera)\n        theDot.setXYpos(int(camera.xpos()) + 25, int(camera.ypos()) + 155)\n        append_id_knob(id(camera), theDot)\n\n# ---First framehold to camera----\n        framehold_cam = nuke.nodes.FrameHold()\n        framehold_cam.setInput(0, camera)\n        framehold_cam.setXYpos(int(camera.xpos()) + 150, int(camera.ypos()) + 15)\n        framehold_cam\[\"first_frame\"].setExpression(\"parent.\{\}.knob.projection_frame\".format(camera.name()))\n        append_id_knob(id(camera), framehold_cam)\n\n#---Second framehold to footage(input)----\n\n        #framehold_cam.selectOnly()\n        #nukescripts.node_copypaste()\n        #framehold_src = nuke.selectedNode()\n        #framehold_src.setXYpos(int(camera.xpos()) + 350, int(camera.ypos()) - 100)\n        nodeInput = nuke.nodes.Input()\n        nodeInput.setXYpos(int(camera.xpos()) + 350, int(camera.ypos()) - 100)\n        append_id_knob(id(camera), nodeInput)\n\n#project3D Node\n\n        project3d = nuke.nodes.Project3D2()\n        project3d.setInput(0, nodeInput)\n        project3d.setInput(1,framehold_cam)\n        project3d.setXYpos(int(camera.xpos()) + 350 , int(nodeInput.ypos()) + 120)\n        append_id_knob(id(camera), project3d)\n\n        first_frame = int(nuke.root()\[\"first_frame\"].getValue())\n        last_frame = int(nuke.root()\[\"last_frame\"].getValue())\n        camera\[\"projection_frame\"].setRange(first_frame, last_frame)\n        camera\[\"projection_frame\"].setValue(nuke.frame())\n\n# ---Adding card3d and copyCamvalue----\n\n        custumCard = nuke.nodes.Card2()\n        custumCard.setInput(0, project3d)\n        custumCard.setInput(1, theDot)\n        custumCard.setXYpos(int(camera.xpos()) + 350, int(project3d.ypos()) + 60)\n\n#copy values from Camera to Card.\n\n        custumCard.knob('translate').setExpression(\"parent.\{\}.translate(\{\}.projection_frame)\".format(camera.name(), camera.name()))\n        custumCard.knob('rotate').setExpression(\"parent.\{\}.rotate(\{\}.projection_frame)\".format(camera.name(), camera.name()))\n        custumCard.knob('lens_in_focal').setExpression(\"parent.\{\}.focal(\{\}.projection_frame)\".format(camera.name(), camera.name()))\n        custumCard.knob('lens_in_haperture').setExpression(\"parent.\{\}.haperture(\{\}.projection_frame)\".format(camera.name(), camera.name()))\n\n    #copyLink to Z\n\n        custumCard\['z'].setExpression(\"parent.\{\}.zposition\".format(camera.name()))\n\n        append_id_knob(id(camera), custumCard)\n\n\n# ---Adding scanlineRender----\n\n        scanline = nuke.nodes.ScanlineRender()\n        scanline.setInput(1, custumCard)\n        scanline.setInput(2, theDot)\n        scanline.setXYpos(int(camera.xpos()) + 350, int(project3d.ypos()) + 130)\n        scanline.knob('motion_vectors_type').setValue('off')\n        append_id_knob(id(camera), scanline)\n\n\n\n#Remove projection Nodes\n    else:\n        for node in nuke.allNodes():\n            camera_id_knob = node.knobs().get(\"camera_id\")\n            if camera_id_knob and camera_id_knob.value() == str(id(camera)):\n                nuke.delete(node)\n\n\ndef append_id_knob(id_, target_node):\n    id_knob = nuke.Text_Knob(\"camera_id\", \"camera id\", str(id_))\n    id_knob.setVisible(False)\n    target_node.addKnob(id_knob)\n\n\n\n\n\n\n################PICK CAMERA####################\n\ndef pickCamera():\n\n    camera = nuke.thisNode()#the main camera, the target\n    selectedNode = nuke.selectedNode() #the other camera, the source\n\n    if selectedNode.Class() == 'Camera2':\n        camera.readKnobs(selectedNode.writeKnobs())\n\n    else:\n        nuke.message(\"please, select a single Camara node\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" +STARTLINE}
 addUserKnob {22 create_projection l "create projection" T set_projection(True) +STARTLINE}
 addUserKnob {22 remove_projection -STARTLINE +HIDDEN T set_projection(False)}
 addUserKnob {7 projection_frame l "projection frame" +HIDDEN R 1 79911}
 addUserKnob {7 zposition t "set the position in z of the card" +HIDDEN R 0 100}
 addUserKnob {22 PickCamera l "Pick Camera" t "first select your camera, and press this button" T "################PICK CAMERA####################\n\n\ncamera = nuke.thisNode()#the main camera, the target\nselectedNode = nuke.selectedNode() #the other camera, the source\n\nif selectedNode.Class() == 'Camera2':\n    camera.readKnobs(selectedNode.writeKnobs())\n\nelse:\n    nuke.message(\"please, select a single Camara node\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" +STARTLINE}
}
